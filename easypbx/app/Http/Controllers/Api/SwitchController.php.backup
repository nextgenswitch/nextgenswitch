<?php

namespace App\Http\Controllers\Api;

use Exception;
use App\Tts\Tts;
use Carbon\Carbon;
use App\Models\Call;
use App\Models\Queue;
use App\Models\Trunk;
use App\Models\Setting;
use App\Models\SipUser;
use App\Models\CallRecord;
use App\Models\SipChannel;
use App\Models\Organization;
use Illuminate\Http\Request;
use App\Enums\CallStatusEnum;
use App\Enums\QueueStatusEnum;
use Illuminate\Support\Facades\Log;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Cache;
use App\Http\Controllers\Api\ActionParser;
use App\Http\Controllers\Api\FunctionCall;
use App\Http\Controllers\Api\Functions\CallHandler;
use App\Http\Controllers\Api\Functions\QueueWorker;
use App\Http\Controllers\Api\VoiceResponse;
use Illuminate\Support\Facades\Redis;

/* organization specific

default language
sms gateway url
record format
default tts
default stt */

class SwitchController extends Controller {

    public function index( Request $request ) {
        if ( $request->isMethod( 'post' ) ) {
        return ['retry'=>10];
        }

       /*  $value = Redis::script('LOAD',<<<'LUA'
        return #redis.pcall('keys', ARGV[1])
        LUA);
        $data = FunctionCall::create_worker(['url'=>'http://127.0.0.1:81/api','name'=>'testworker','delay'=>1]);
        dd($data);

        $this->switch_set_settings(['sip_log_delay'=>60,'sip_log_ip'=>'103.86.196.156:0']);
        dd($value); */
        /* $val = Redis::set('ipblock:1.1.1.2:34232','1dd');
        dump($val); 
        //Redis::expire('ipblock:1.1.1.1:34232',60);
        $val = Redis::get('ipblock:1.1.1.2:34232');
        dump($val);*/
        
        //dd($val);
       
    }

    public function switch_set_settings($post){
        try {
            $response = Http::post( "http://" . config( 'settings.switch.http_listen' ) . config( 'enums.set_settings' ), $post );
            if ( $response->failed() ) {

            }

           return  $response->json();
        } catch ( Exception $e ) {

            
        }
    }

    public function speechToText() {
        $data = request()->json()->all();
        $text = Tts::speechToText( storage_path( 'app/public/' . $data['voice'] ) );
        Log::info( "Speech to text result" );
        Log::info( $text );
        out:

        if ( $text ) {
            return $text;
        } else {
            return ['error' => true];
        }

    }

    public function textToSpeech() {
        $data = request()->input();
        $file = Tts::synthesize( $data['text'], isset( $options['lang'] ) ? $options['lang'] : null );

        return $file;
    }

    public function isIpBlocked(){
        $data = request()->json()->all();
        Log::info( $data);
        $ip = $data['srcip'];
        
        $milliseconds = intval(microtime(true) * 1000);
        
        $count = Redis::eval(
            "redis.call('set','ipblock:$ip:$milliseconds',1) redis.call('expire','ipblock:$ip:$milliseconds',60)  return #redis.call('keys', 'ipblock:$ip:*')",
            0
        );
        $blocked = false;
        if($count > 15){
            $blocked = true;
        }
        return ["blocked"=>$blocked,'count'=>$count,'expire'=>600];

    }

    public function sendSms(){
        $data = request()->input();
        return FunctionCall::send_sms($data);
    }

 

    public function getConfig() {
        $config = Setting::getSettings( 'switch' );

        SipChannel::truncate();
        Queue::where( "status", "<", QueueStatusEnum::Bridged->value )->update( ['status' => QueueStatusEnum::Hangup] );
        Call::where( "status", "<", CallStatusEnum::Disconnected->value )->update( ['status' => CallStatusEnum::Failed] );
        Redis::script('LOAD',<<<'LUA'
        return #redis.pcall('keys', ARGV[1])
        LUA);
        return $config;
    }

    public function call_record_update() {
        $data = request()->json()->all();
        Log::info( $data );
        $call = Call::find( $data['call_id'] );

        if (  ! $call ) {
            goto out;
        }

        CallRecord::create( ['call_id' => $data['call_id'], 'dial_call_id' => $data['bridge_call_id'], 'organization_id' => $call->organization_id, 'record_path' => $data['record_file']] );
        out:
        return ['error' => true];
    }

    public function update() {
        $data = request()->json()->all();
        //Log::info( $data );
        if (  ! isset( $data['call_id'] ) ) {
            goto out;
        }

        $call = Call::find( $data['call_id'] );

        if (  ! $call ) {
            goto out;
        }

        if ( $data['connect_time'] > 0 ) {
            $call->connect_time = date( "Y-m-d H:i:s", $data['connect_time'] );
        }

        if ( $data['ringing_time'] > 0 ) {
            $call->ringing_time = date( "Y-m-d H:i:s", $data['ringing_time'] );
        }

        if ( $data['establish_time'] > 0 ) {
            $call->establish_time = date( "Y-m-d H:i:s", $data['establish_time'] );
        }

        if ( $data['disconnect_time'] > 0 ) {
            $call->disconnect_time = date( "Y-m-d H:i:s", $data['disconnect_time'] );
        }

        $call->status  = $data['status'];
        $call->channel = $data['channel'];

        if ( $call->status == CallStatusEnum::Disconnected ) {

            if ( $data['establish_time'] == 0 ) {

                if ( $call->uas ) {
                    if($data['disconnect_code'] == 104) 
                        $call->status = CallStatusEnum::Cancelled;
                    else
                        $call->status = CallStatusEnum::Failed;
                } else {

                    if ( $data['disconnect_code'] >= 400 ) {
                        $call->status = CallStatusEnum::Busy;
                    } else {
                        $call->status = CallStatusEnum::NoAnswer;
                    }

                }

            }

        }

        if ( $data['establish_time'] > 0 && $data['disconnect_time'] > 0 ) {
            $call->duration = $data['disconnect_time'] - $data['establish_time'];
        }

        $statusCallback = Cache::get("CallStatusCallback:" .$call->id,[]);
        if(isset($statusCallback['method']) && isset($statusCallback['url'])){
          $post = CallHandler::prepare_call_json($call);
          if($statusCallback['method'] == 'POST') Http::post($statusCallback['url'],$post);
          else Http::get($statusCallback['url'],$post);
          if($call->status->value >= CallStatusEnum::Disconnected->value) Cache::forget("CallStatusCallback:" .$call->id);
        }

        $call->save();

        return ['error' => false];
        out:
        return ['error' => true];
    }

    public function api_call_list(Request $request, $perpage = 10, $page = 1) {
        
        $perPage = $request->get( 'per_page' ) ?: 50;
        $fromDate = $request->get('from_date') ?: '';
        $toDate = $request->get('to_date') ?: '';

        $calls = Call::where('organization_id', $request->organization_id);    

        if(!empty($fromDate)){
            $calls = $calls->where('created_at', '>=', Carbon::parse($fromDate)->format('Y-m-d H:i:s'));
        }

        if(!empty($toDate)){
            $calls = $calls->where('created_at', '<=', Carbon::parse($toDate)->format('Y-m-d H:i:s'));
        }

        $calls = $calls->latest()->paginate($perPage);
        $items = [];

        foreach($calls->items() as $item){
            $items[] =CallHandler::prepare_call_json($item);
        }

        $response = [
            'perPage'=>$calls->perPage(),
            'page' => $calls->currentPage(),
            'count'=>$calls->count(),
            'total'=>$calls->total(),
            'data'=>$items
        ];

        return $response;
    }

    public function api_call_get( $call_id ) {
        $err_code = 2;

        if ( empty( $call_id ) ) {
            goto out;
        }

        $call = Call::find( $call_id );

        if (  ! $call ) {
            goto out;
        }

        return CallHandler::prepare_call_json( $call,true );
        $err_msg = CallHandler::call_error_code_to_msg( $err_code );
        out:
        return response( [
            'errors' => [[
                'message' => $err_msg,
                "code"    => $err_code,
            ]],
        ], 404 );
    }

    public function api_call_modify( $call_id, Request $request ) {
        //dd($request->all());
        $response = CallHandler::modify( $call_id, $request );

        if ( isset( $response['error'] ) ) {
            $err_msg = $this->call_error_code_to_msg( $response['error_code'] );

            return response( [
                'errors' => [[
                    'message' => $err_msg,
                    "code"    => $response['error_code'],
                ]],
            ], 404 );

        } else {
            return $response;
        }

    }

    public function api_call_create( Request $request ) {

        $response = CallHandler::create( $request );

        if ( isset( $response['error'] ) ) {
            $err_msg = CallHandler::call_error_code_to_msg( $response['error_code'] );

            return response( [
                'errors' => [[
                    'message' => $err_msg,
                    "code"    => $response['error_code'],
                ]],
            ], 400 );

        } else {
            return $response;
        }

    }

    

    public function call_transfer() {
        $data = request()->json()->all();
        Log::debug("call transfer request");
        Log::debug($data);
        $call = Call::find( $data['call_id'] );

        if (  ! $call ) {
            goto out;
        }

        $response = FunctionCall::getOutboundRoutes( $data['to'], $call->organization_id );
        Log::debug("modifying call with response");
        Log::debug($response->xml());
        $response = FunctionCall::modify_call( $data['call_id'], [ 'responseXml' => $response->xml()]);
        return $response;
     
        out:
        Log::debug("call transfer failed");
        return ['error' => true];
    }

    public function dial() {
        $data = request()->json()->all();
        $call = Call::find( $data['call_id'] );

        if (  ! $call ) {
            goto out;
        }

        if ( isset( $data['enqueue'] ) ) {
            $method = ( isset( $data['enqueue']['method'] ) ) ? $data['enqueue']['method'] : "POST";
            $post   = ['name' => $data['to'], 'call_id' => $call->id];

            if ( strtoupper( $method ) == 'POST' ) {
                $response = Http::asForm()->post( $data['enqueue']['url'], $post );
            } else {
                $response = Http::get( $data['enqueue']['url'], $post );
            }

            if ( $response->failed() ) {
                goto out;
            }

            //$this->dial_queue($data["to"]);
            $xmlelem = VoiceResponse::getElementFromXml( $response->body() );
            $actions = ActionParser::parse( $call->organization_id, $xmlelem );

            return ['call_id' => $call->id, 'actions' => $actions];

        } elseif ( isset( $data['queue'] ) ) {
            $actions = [];
            $method  = ( isset( $data['queue']['method'] ) ) ? $data['queue']['method'] : "POST";
            $post    = ['name' => $data['to'], 'call_id' => $call->id];

            if ( strtoupper( $method ) == 'POST' ) {
                $response = Http::asForm()->post( $data['queue']['url'], $post );
            } else {
                $response = Http::get( $data['queue']['url'], $post );
            }

            if ( $response->failed() ) {
                goto out;
            }

            $xmlelem = VoiceResponse::getElementFromXml( $response->body() );
            $actions = ActionParser::parse( $call->organization_id, $xmlelem );

            return ['call_id' => $call->id, 'actions' => $actions];
        }

        $response = new VoiceResponse();
        $response->bridge( $data['call_id'] );

        $call_data = FunctionCall::send_call( ['to' => $data['to'], 'channel_id' => $data['channel_id'], "domain" => $call->organization->domain, 'from' => $data['from'], 'responseXml' => $response->xml()] );

        if ( isset( $call_data['call_id'] ) ) {
            $call = Call::find( $call_data['call_id'] );
            $call->update( ['parent_call_id' => $data['call_id']] );
        }

        return $call_data;
        out:
        return ['error' => true];
    }

    public function url_request() {
        $data = request()->json()->all();

        if (  ! isset( $data['call_id'] ) ) {
            goto out;
        }

        $call = Call::find( $data['call_id'] );

        if (  ! $call ) {
            goto out;
        }

        $post = $data['body'];

        $url    = $data['url'];
        $method = isset( $data['method'] ) ? $data['method'] : "POST";



        if ( strtoupper( $method ) == 'POST' ) {
            $response = Http::asForm()->post( $url, $post );
        } else {
            $response = Http::get( $url, $post );
        }

        if ( $response->failed() ) {
            goto out;
        }

        $xmlelem = VoiceResponse::getElementFromXml( $response->body(), $url );

        if ( $xmlelem === false ) {
            goto out;
        }

        if (  ! isset( $xmlelem['url'] ) ) {
            $xmlelem->addAttribute( "url", $url );
        }

        $actions = ActionParser::parse( $call->organization_id, $xmlelem );



        return ['call_id' => $call->id, 'actions' => $actions];
        out:
        return ['error' => true];
    }

    public function func_call( $func_id, $dest_id ) {
        $bresponse = new VoiceResponse();
        $response = FunctionCall::execute( $func_id, $dest_id, $bresponse, request()->all() );

        return ($response)?$response->asXML():$bresponse->asXML();
    }

    public function call_in() {
        $data        = request()->json()->all();
        $sip_channel = SipUser::find( $data['channel_id'] );
        if(!$sip_channel) return;
        $actions     = ActionParser::parse( $sip_channel->organization_id, FunctionCall::processDestination( $data['to'], $sip_channel, $data['from'] ) );
        $call_data   = ['organization_id' => $sip_channel->organization_id, 'destination' => $data['to'], 'channel' => $data['channel'], 'caller_id' => $data['from'], 'sip_user_id' => $data['channel_id'], 'status' => 0, 'connect_time' => now(), 'duration' => 0, 'uas' => true];
        $call_id     = Call::create( $call_data )->id;

        if ( sizeof( $actions ) > 0 ) {
            $code = 180;
        } else {
            $code = 404;
        }

        return ['call_id' => $call_id, 'code' => $code, 'reason' => FunctionCall::sip_code_to_msg( $code ), 'actions' => $actions];

    }

    public function sip_user_outbound() {
        $trunks = Trunk::all();

        foreach ( $trunks as $trunk ) {
            FunctionCall::reg_channel( $trunk->sip_user_id );
        }

        return ['error' => false];
    }

    public function sip_user_validate() {
        $data         = request()->json()->all();
        $organization = Organization::where( "domain", $data['domain'] )->first();

        if (  ! $organization ) {
            $organization = Organization::where( "is_default", 1 )->first();
        }

        if ( $organization ) {
            $sip_user = SipUser::where( "username", $data['user'] )->where('status',1)->where( "organization_id", $organization->id )->first();

            if ( $sip_user ) {
                return ['id' => $sip_user->id, 'password' => $sip_user->password, 'host' => $organization->domain, 'md5_hash' => base64_encode( md5( $data['user'] . ":" . $data['realm'] . ":" . $sip_user->password, true ) )];
            }

        }
        
        return ['error'=>true];

    }

    public function sip_channel_update() {
        $data = request()->json()->all();
        SipChannel::where( "sip_user_id", $data['channel_id'] )->where( "location", $data['location'] )->delete();
        $sip_user = SipUser::find( $data['channel_id'] );
        if ( $sip_user && $data['expire'] > 0 ) {
            SipChannel::create(
                ['sip_user_id'    => $data['channel_id'],
                    'organization_id' => $sip_user->organization_id,
                    'location'        => $data['location'],
                    'expire'          => $data['expire'],
                    'ua'              => isset( $data['ua'] ) ? $data['ua'] : "Unknown",
                ] );
        }

        

        return ['error' => false];
    }

    public function queue_worker($id,$func_id){
        $queue_worker = new QueueWorker($id,$func_id);
        $queue_worker->handle();
        Log::debug("Queue worker executing");
        return [];
    }

}
